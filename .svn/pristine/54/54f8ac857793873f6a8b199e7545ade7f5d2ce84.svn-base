#include <algorithm>
#include <climits>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int N;
vector<vector<int>> country, build, destroyCost;
vector<bool> visited;

void dfs(int u) {
  visited[u] = true;
  for (int v = 0; v < N; v++) {
    if (country[u][v] && !visited[v]) {
      dfs(v);
    }
  }
}

bool isConnected(int u, int v) {
  fill(visited.begin(), visited.end(), false);
  dfs(u);
  return visited[v];
}

int main() {
  string s_country, s_build, s_destroyCost;
  cin >> s_country >> s_build >> s_destroyCost;

  N = count(s_country.begin(), s_country.end(), ',') + 1;

  country.resize(N, vector<int>(N, 0));
  build.resize(N, vector<int>(N, 0));
  destroyCost.resize(N, vector<int>(N, 0));
  visited.resize(N, false);

  // Parse input strings
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      country[i][j] = s_country[i * (N + 1) + j] - '0';
      build[i][j] = (isupper(s_build[i * (N + 1) + j]))
                        ? s_build[i * (N + 1) + j] - 'A'
                        : s_build[i * (N + 1) + j] - 'a' + 26;
      destroyCost[i][j] = (isupper(s_destroyCost[i * (N + 1) + j]))
                              ? s_destroyCost[i * (N + 1) + j] - 'A'
                              : s_destroyCost[i * (N + 1) + j] - 'a' + 26;
    }
  }

  int cost = 0;

  // Check for cities that are not connected and add roads
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      if (i != j && !country[i][j] && !isConnected(i, j)) {
        int minCost = INT_MAX;
        int minU = -1, minV = -1;
        for (int x = 0; x < N; x++) {
          for (int y = 0; y < N; y++) {
            if (x != y && !country[x][y] && !isConnected(x, y) &&
                build[x][y] < minCost) {
              minCost = build[x][y];
              minU = x;
              minV = y;
            }
          }
        }
        if (minU != -1) {
          country[minU][minV] = country[minV][minU] = 1;
          cost += minCost;
        }
      }
    }
  }

  // Check for cities that have more than one path and remove roads
  for (int i = 0; i < N; i++) {
    for (int j = i + 1; j < N; j++) {
      if (country[i][j]) {
        country[i][j] = country[j][i] = 0;
        if (isConnected(i, j)) {
          cost += destroyCost[i][j];
        } else {
          country[i][j] = country[j][i] = 1;
        }
      }
    }
  }

  cout << cost << endl;
  return 0;
}