#include <algorithm>
#include <climits>
#include <cstring>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

struct Edge {
  int u, v, weight;
  bool isExist;

  Edge(int _u, int _v, int _w, bool _e)
      : u(_u), v(_v), weight(_w), isExist(_e) {}

  bool operator<(const Edge& other) const { return weight < other.weight; }
};

int N;
vector<Edge> edges;
vector<int> parent;

int find(int u) {
  if (u != parent[u]) {
    parent[u] = find(parent[u]);
  }
  return parent[u];
}

bool join(int u, int v) {
  int pu = find(u);
  int pv = find(v);
  if (pu == pv) return false;
  parent[pu] = pv;
  return true;
}

int main() {
  string s_country, s_build, s_destroyCost;
  cin >> s_country >> s_build >> s_destroyCost;

  N = count(s_country.begin(), s_country.end(), ',') + 1;

  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      int buildCost = (isupper(s_build[i * (N + 1) + j]))
                          ? s_build[i * (N + 1) + j] - 'A'
                          : s_build[i * (N + 1) + j] - 'a' + 26;
      int destroyCost = (isupper(s_destroyCost[i * (N + 1) + j]))
                            ? s_destroyCost[i * (N + 1) + j] - 'A'
                            : s_destroyCost[i * (N + 1) + j] - 'a' + 26;
      bool exist = s_country[i * (N + 1) + j] - '0';
      if (i < j) {
        if (exist) {
          edges.push_back(Edge(i, j, destroyCost, true));
        } else {
          edges.push_back(Edge(i, j, buildCost, false));
        }
      }
    }
  }

  parent.resize(N);
  for (int i = 0; i < N; i++) {
    parent[i] = i;
  }

  int cost = 0;
  for (const Edge& e : edges) {
    if (join(e.u, e.v)) {
      if (!e.isExist) {
        cost += e.weight;
      }
    }
  }

  cout << cost << endl;
  return 0;
}
